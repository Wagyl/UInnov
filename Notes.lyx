#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 2cm
\headsep 2cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Part*
Notes en vrac
\end_layout

\begin_layout Itemize
Swing / GTK / QT reposent sur un modèle de 
\begin_inset Quotes eld
\end_inset

widgets
\begin_inset Quotes erd
\end_inset

 - des boites dans des boites qui forment des boites qu'on peut remettre
 dans des boites - avec une expressivité 
\begin_inset Quotes eld
\end_inset

bas niveau
\begin_inset Quotes erd
\end_inset

.
 On définit 
\begin_inset Quotes eld
\end_inset

à la main
\begin_inset Quotes erd
\end_inset

 l'emplacement des différents éléments -> c'est naze.
\end_layout

\begin_layout Itemize
Une interface créée à l'aide de Swing / GTK / QT offre la possibilité d'adapter
 son aspect visuel à l'OS hôte (sans avoir à changer le code) -> intéressant.
\end_layout

\begin_layout Itemize
Swing / GTK / QT n'offrent pas une 
\begin_inset Quotes eld
\end_inset

portabilité
\begin_inset Quotes erd
\end_inset

 pour les interfaces créées : il n'est pas aisé de transporter une interface
 d'une appli à une autre sans avoir à beaucoup toucher au code -> peut-être
 intéressant ?
\end_layout

\begin_layout Itemize
Toujours sur la 
\begin_inset Quotes eld
\end_inset

portabilité
\begin_inset Quotes erd
\end_inset

 : Swing n'offre pas un langage intermédiaire indépendant des bindings pour
 différents langages hôtes.
 GTK offre une description XML des interfaces (à vérifier) -> concept intéressan
t.
 Quid de QT ?
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Portabilité / adptativité
\begin_inset Quotes erd
\end_inset

 : les interfaces créées via Swing / GTK / QT ne s'adaptent pas automatiquement
 au support matériel : clavier / souris, écran tactile, quelle taille d'écran
 ...
 c'est naze !
\end_layout

\begin_layout Itemize
HTML / CSS offre justement cette approche, cependant des problèmes se posent
 dans le cas HTML / CSS : les différents navigateurs interprêtent de manières
 assez différentes les styles, est-ce un problème ?
\end_layout

\begin_layout Itemize
Bien que n'étant pas fait pour la création d'interfaces graphiques dans
 des applications autre que web, le couple HTML / CSS a une approche intéressant
e : séparer le style de la description des éléments.
\end_layout

\begin_layout Itemize
Swing / GTK n'offrent à priori aucune analyse statique de 
\begin_inset Quotes eld
\end_inset

débilité
\begin_inset Quotes erd
\end_inset

 d'une interface : des éléments toujours invisibles / non atteignables etc
 etc ...
\end_layout

\begin_layout Itemize
Swing est une horreur à débugger, quid de GTK / QT ?
\end_layout

\begin_layout Itemize
Swing est très verbeux, quid de GTK / QT ?
\end_layout

\begin_layout Itemize
Quid des performances de Swing / GTK / QT ?
\end_layout

\begin_layout Itemize
La gestion des actions est nulle dans Swing : verbeuse, assez peu intuitive.
 Quid de GTK / QT ?
\end_layout

\begin_layout Itemize
A compléter ...
 les idées sont à fouttre en vrac, il faudra trier ensuite.
\end_layout

\begin_layout Itemize
Interface résultante modelable par l'utilisateur.
\end_layout

\begin_layout Itemize
Debugging aisé pour le programmeur.
\end_layout

\begin_layout Itemize
etc etc ...
\end_layout

\begin_layout Section
Qu'est ce qu'une interface utilisateur et comment en programmer
\end_layout

\begin_layout Subsection
Définition des concepts liés à la notion d'interface utilisateur
\end_layout

\begin_layout Subsubsection*
Qui sont les utilisateurs ?
\end_layout

\begin_layout Itemize
Deux catégories : nous utiliserons suivante afin de distinguer les deux
 catégories d'utilisateurs : utilisateur application, et programmeur.
\end_layout

\begin_layout Itemize
Dans les deux cas, il faut avoir une approche orientée utilisateur, les
 besoins seront différents, mais l'approche à adopter la même.
 
\end_layout

\begin_layout Itemize
Utilisateur application : il faut prendre en compte à la fois l'aspect sensoriel
 (visuel si écran il y a) et l'aspect 
\begin_inset Quotes eld
\end_inset

contrôle
\begin_inset Quotes erd
\end_inset

 (gestion des périphériques d'entrée).
\end_layout

\begin_layout Itemize
Intéraction utilisateur application - programme : plusieurs 
\begin_inset Quotes eld
\end_inset

niveaux
\begin_inset Quotes erd
\end_inset

 de compétences parmi les utilisateurs avec des besoins différents.
\end_layout

\begin_layout Subsubsection*
Conception - génie logiciel
\end_layout

\begin_layout Standard
Utilisation de la conception centrée utilisateur qui est un modèle itératif.
\end_layout

\begin_layout Itemize

\series bold
Analyse :
\series default
 analyse des besoins, un panel représentatif d'utilisateurs des deux catégories
 concernées doit être constitué afin d'établir les dits besoins.
\end_layout

\begin_layout Itemize

\series bold
Conception :
\series default
 un prototype doit être conçu en fonction des besoins établis à l'étape
 précédente.
\end_layout

\begin_layout Itemize

\series bold
Evaluation :
\series default
 sur la base du prototype réalisé, une évaluation est faite.
 Le procédé étant itératif, cette évaluation servira de base à la modification
 des besoins de la première étape.
 
\end_layout

\begin_layout Itemize
Il faut établir des 
\begin_inset Quotes eld
\end_inset

topic
\begin_inset Quotes erd
\end_inset

 d'évaluation - besoins, les deux sont liés : 
\end_layout

\begin_deeper
\begin_layout Itemize
Pour l'utilisateur application :
\end_layout

\begin_deeper
\begin_layout Itemize
Vitesse d'apprentissage - aide nécessaire / intégrée - nombre d'erreurs
 commises lors d'un test.
\end_layout

\begin_layout Itemize
Correction des erreurs.
\end_layout

\begin_layout Itemize
Temps de réponse.
\end_layout

\begin_layout Itemize
Efficacité - navigation rapide ?
\end_layout

\end_deeper
\begin_layout Itemize
Pour le programmeur :
\end_layout

\begin_deeper
\begin_layout Itemize
Programmation intuitive.
\end_layout

\begin_layout Itemize
Bonne expressivité - ne pas avoir un code verbeux à produire (capacité d'adaptat
ion au support etc etc ?).
\end_layout

\begin_layout Itemize
Typage fort - sûreté.
\end_layout

\begin_layout Itemize
Debugging aisé - analyse de pertinence (détecter le maximum d'absurdités)
\end_layout

\begin_layout Itemize
Intégration aux IDE populaires ? Création d'un IDE ?
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\series bold
Les outils : 
\series default
des outils du génie logiciel peuvent nous aider à l'intérieur des phases
 décrites précédement :
\end_layout

\begin_deeper
\begin_layout Itemize
Scénarios / diagrammes de cas d'utilisation : à la fois pour établir les
 besoins et faire l'évaluation au niveau de l'utilisateur application.
 Peut aussi être utilisé pour le côté programmeur bien que le point suivant
 me semble être plus approprié.
\end_layout

\begin_layout Itemize
Diagrammes relationnels - diagrammes de classes : relations entre les différents
 objets de l'interface, est utile dans la phase de conception pour 
\begin_inset Quotes eld
\end_inset

se mettre à la place
\begin_inset Quotes erd
\end_inset

 du programmeur.
\end_layout

\begin_layout Itemize
Design pattern : beaucoup d'interfaces utilisateurs utilisent des principes
 similaires d'intéraction avec l'utilisateur, l'implémentation 
\begin_inset Quotes eld
\end_inset

native
\begin_inset Quotes erd
\end_inset

 de comportements génériques peut être pratique.
\end_layout

\end_deeper
\begin_layout Subsection
Division du travail
\end_layout

\begin_layout Standard
La conception d'une interface graphique par dessus un moteur d'application
 peut se diviser en quatre parties qui devraient demeurer indépendantes
 le plus possible.
\end_layout

\begin_layout Itemize
Communication entre le moteur et l'interface :
\end_layout

\begin_deeper
\begin_layout Itemize
Affichage : ensemble des données du moteur affichées (sous diverse forme)
 par l'interface ;
\end_layout

\begin_layout Itemize
Actions : ensemble des actions de l'utilisateur modifiant l'état du moteur.
 Tout élément de l'interface permettant d'agir sur le moteur devrait être
 lié à une 
\begin_inset Quotes sld
\end_inset

Action
\begin_inset Quotes srd
\end_inset

.
 Une même Action doit pouvoir être effectuée par différents éléments d'une
 interface, et par différentes interfaces.
\end_layout

\begin_layout Standard
Cette section doit être indépendante de l'interface finale (éléments, aspect,
 etc) et de la plateforme.
\end_layout

\end_deeper
\begin_layout Itemize
Éléments de l'interface ; dépendant de la plateforme, lié à la partie précédente.
\end_layout

\begin_layout Itemize
Personnalisation des éléments : positionnement, taille, aspect...
\end_layout

\begin_deeper
\begin_layout Standard
Une telle configuration est évidemment dépendante de la partie précédente.
\end_layout

\begin_layout Standard
Certains paramètres de cette configuration doivent pouvoir être modifiés
 par l'utilisateur final.
\end_layout

\begin_layout Standard
Ces configurations doivent pouvoir être enregistrées et s'échanger facilement.
\end_layout

\end_deeper
\begin_layout Itemize
Aspect général.
\end_layout

\begin_layout Section
Analyse de l'existant
\end_layout

\begin_layout Standard
[Texte d'intro sur les différents trucs dont on va parler.]
\end_layout

\begin_layout Itemize
Programmer une interface graphique, si on le fait « à la main », c'est jamais
 agréable, pour différentes raisons :
\end_layout

\begin_deeper
\begin_layout Itemize
Apprendre à programmer une interface graphique en utilisant telle ou telle
 API peut-être plus ou moins compliqué.
 En particulier, GTK+ est assez laid et loin d'être aussi intuitif que des
 bibliothèques reposant sur le modèle objet, comme Qt ou Swing.
\end_layout

\begin_layout Itemize
Dans tous les cas, la programmation est longue, répétitive et, à de rares
 exceptions (TkInter ?), extrêmement verbeuse.
 [Code exemple]
\end_layout

\begin_layout Itemize
Ceci est, a priori, du au fait que Swing, GTK+, Qt et les autres bibliothèques
 reposent entièrement sur un modèle de widgets : des composants imbriqués
 les uns dans les autres de façon quasi-infinie, qu'on doit tous définir,
 paramétrer et placer manuellement.
 On parle d'ailleurs de widget toolkit pour définir les bibliothèques permettant
 de construire des interfaces graphiques.
 Gestion des actions.
\end_layout

\end_deeper
\begin_layout Itemize
On peut utiliser de sympathiques IDE comme QtCreator/QtDesigner et Glade
 pour nous aider, mais il est quand même nécessaire de savoir coder « en
 vrai » avant de les utiliser.
 MacOS propose, avec XCode et différents outils comme Cocoa, une vision
 intéressante -> à développer.
\end_layout

\begin_layout Itemize
Portabilité v1 : Qt est disponible en natif sur la plupart des systèmes
 d'exploitation existants, et notamment les systèmes embarqués, incluant
 Android, VxWorks ou encore BlackBerry OS.
 GTK+ lui n'est disponible que sur les systèmes de bureaux majeurs : Windows,
 MacOS, Linux/Unix.
\end_layout

\begin_layout Itemize
Portabilité v2 : Swing offre une définition de la portabilité différente
 de celle de Qt et GTK+ : en effet, la bibliothèque n'est utilisable qu'en
 Java, mais celui-ci étant multi-platerforme, Swing devient fonctionnel
 sur tout système sur lequel Java est disponible.
 En revanche il n'est utilisable dans aucun autre langage, là où Qt et GTK+
 ont tout plein de bindings.
 Nativement, Qt est une bibliothèque C++, et dispose de bindings Java, Perl,
 Python, PHP ou encore Ruby.
 GTK+ est une bibliothèque C, disposant de bindings C++, Java, Perl, Python,
 PHP, et Ruby mais aussi C# et Javascript.
 De plus, GTK+ dispose d'un binding Vala, un langage spécifiquement créé
 pour les développeurs de Gnome, basé sur C# et qui compile vers C !
\end_layout

\begin_layout Itemize
Portabilité v3 : Les éditeurs d'interfaces de GTK+ et Qt, Glade et QtDesigner,
 permettent d'enregister les interfaces créées sous forme de fichier XML.
 Le concept est intéressant puisqu'il permet de 
\begin_inset Quotes sld
\end_inset

porter
\begin_inset Quotes srd
\end_inset

 une interface dans différents langages, sans que l'on ait à beaucoup toucher
 au code.
 Cela aide donc à séparer le fond et la forme du logiciel.
 Swing quant à lui n'offre rien de tel, ce qui peut peut-être s'expliquer
 par l'absence de bindings dans d'autres langages.
 Il existe par ailleurs des langages de descriptions d'IG basés sur XML
 (XAML et XUL par exemple) -> à approfondir ?
\end_layout

\begin_layout Itemize
Bien que n'étant pas fait pour la création d'interfaces graphiques dans
 des applications autre que web, le couple HTML / CSS a une approche intéressant
e : séparer le style de la description des éléments.
 Le but étant ici de pouvoir afficher un même contenu sous différentes formes,
 selon le support utilisé : un document HTML peut utiliser différentes feuilles
 de styles et définir laquelle sera utilisée selon le media sur lequel il
 sera affiché (grâce à l'attribut media de la balise style), et un document
 CSS peut lui-même choisir d'afficher un élément différemment selon le support.
 Le plus souvent, c'est utilisé pour pouvoir imprimer une page web facilement
 (media screen lorsque la page est affichée par un navigateur, print lorsqu'on
 veut l'imprimer).
 Néanmoins on a un problème similaire à celui des interfaces graphiques
 qui n'ont pas le même rendu sous différents environnements, à savoir que
 tous les navigateurs n'interprètent pas le CSS de la même manière alors
 qu'ils le devraient.
 De plus, le concept de « boites dans des boites » est toujours présent
 (les balises imbriquées du HTML).
\end_layout

\begin_layout Itemize
Les différents outils dédiés à la programmation d'interfaces graphiques,
 en particulier Swing, nous promettent souvent de s'adapter au 
\emph on
look and feel
\emph default
 de l'environnement dans lequel l'application est exécutée.
 Si l'idée est bonne puisqu'elle permettrait aux programmeurs d'obtenir
 des applications parfaitement intégrées dans les différents OS sans avoir
 à faire quoique ce soit de particulier, en pratique le résultat est assez
 aléatoire et rarement esthétique.
 [Screenshots]
\end_layout

\begin_layout Itemize
Si autrefois GTK+ était célèbre pour être plus rapide que Qt (ce qui apparemment
 était dû au vieux compilateur utilisé par Qt ?), les deux ont aujourd'hui
 des performances similaires que ce soit au niveau de la mémoire ou du CPU,
 ce n'est donc plus un critère pour les départager.
\end_layout

\begin_layout Standard
Todo : debugging + screenshots + exemples de code.
\end_layout

\begin_layout Section
Outils à développer
\end_layout

\begin_layout Subsection
Bindings
\end_layout

\begin_layout Standard
Liaison d'une propriété d'un élément de l'interface graphique à une valeur
 du moteur de l'application : par exemple, la 
\begin_inset Quotes sld
\end_inset

clickabilité
\begin_inset Quotes srd
\end_inset

 (oui) d'un bouton à un booléen, le champs d'un label à une chaîne de caractères
, la valeur d'un curseur à une valeur du moteur logique, le contenu d'un
 panel à une image...
\end_layout

\begin_layout Standard
La liaison doit être effective dans les deux sens : le changement du champs
 du label par l'utilisateur doit modifier la valeur de la chaîne de caractère,
 tout changement tiers de la valeur doit être répercuté dans le label de
 l'interface.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Solution : la librairie fournit à l'intention du moteur de l'application
 des classes pour des types simples comprenant un pattern observer à destination
 des éléments de l'interface.
 
\end_layout

\begin_layout Subsection
Actions
\end_layout

\begin_layout Standard
Je prépare juste la sous-section des actions car je vais certainement en
 avoir besoin pour le modèle relationnel présenté dessous.
\end_layout

\begin_layout Subsection
Le modèle relationnel
\end_layout

\begin_layout Standard
Les librairies d'interfaces graphiques populaires ne fournissent pas de
 moyen haut-niveau de décrire les relations entre les différents éléments
 de l'interface utilisateur.
 Seule une relation de parenté purement liée au placement des objets les
 uns dans les autres (le contenant est automatiquement parent du contenu)
 est possible, tout autre système de mise en relation entre les éléments
 n'est pas directement supporté.
 
\end_layout

\begin_layout Standard
Il serait cependant intéressant de pouvoir définir plus finement les relations
 entre ces différents éléments, plus précisement, l'idée serait de ne pas
 avoir à décrire l'emplacement d'un élément par rapport à un autre dans
 le 
\begin_inset Quotes sld
\end_inset

code principal
\begin_inset Quotes srd
\end_inset

 mais juste les relations entre ces éléments, un peu à la manière du couple
 HTML / CSS, une 
\begin_inset Quotes sld
\end_inset

feuile style
\begin_inset Quotes srd
\end_inset

 dépendant du support / des préférences de l'utilisateur application / du
 système (cf.
 langages intermédiaires) se charge d'associer une relation à un emplacement
 / visuel / un lien.
\end_layout

\begin_layout Subsection
Langages intermédiaires
\end_layout

\begin_layout Standard
Plus approprié ici, à compléter entre autre quand l'idée d'un interpréteur
 pour le visuel de l'interface aura été tranchée.
\end_layout

\end_body
\end_document
