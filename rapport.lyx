#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Projet de Programmation Comparée : 
\begin_inset Quotes sld
\end_inset

Interfaces Utilisateurs
\begin_inset Quotes srd
\end_inset


\end_layout

\begin_layout Section
Qu'est ce qu'une interface utilisateur et comment en programmer
\end_layout

\begin_layout Subsection
Définition des concepts liés à la notion d'interface utilisateur
\end_layout

\begin_layout Subsubsection*
Qui sont les utilisateurs ?
\end_layout

\begin_layout Standard
Avant toute analyse ou réflexion, il est important de définir qui sont les
 utilisateurs du système considéré.
\end_layout

\begin_layout Itemize
Deux catégories : nous utiliserons la terminologie suivante afin de distinguer
 les deux catégories d'utilisateurs : utilisateur application, et programmeur.
\end_layout

\begin_layout Itemize
Dans les deux cas, il faut avoir une approche orientée utilisateur, les
 besoins seront différents, mais l'approche à adopter la même.
 
\end_layout

\begin_layout Itemize
Utilisateur application : il faut prendre en compte à la fois l'aspect sensoriel
 (visuel si écran il y a) et l'aspect 
\begin_inset Quotes eld
\end_inset

contrôle
\begin_inset Quotes erd
\end_inset

 (gestion des périphériques d'entrée).
\end_layout

\begin_layout Itemize
Interaction utilisateur application - programme : plusieurs 
\begin_inset Quotes eld
\end_inset

niveaux
\begin_inset Quotes erd
\end_inset

 de compétences parmi les utilisateurs avec des besoins différents.
\end_layout

\begin_layout Subsubsection*
Conception - génie logiciel
\end_layout

\begin_layout Standard
La conception d'une interface utilisateur doit être centrée autour des deux
 catégories d'acteurs définies précédemment, l'utilisation du modèle de
 conception centré utilisateur semble alors tout à fait correspondre aux
 besoins.
\end_layout

\begin_layout Standard
Ce dernier est itératif, chaque itération étant composée des trois phases
 suivantes :
\end_layout

\begin_layout Itemize

\series bold
Analyse :
\series default
 on analyse les besoins des acteurs du système, un panel représentatif d'utilisa
teurs des deux catégories concernées doit être constitué afin d'établir
 les dits besoins.
\end_layout

\begin_layout Itemize

\series bold
Conception :
\series default
 un prototype doit être conçu en fonction des besoins établis à l'étape
 précédente.
 Chaque prototype servira le plus souvent de base à celui à l'étape suivante
\end_layout

\begin_layout Itemize

\series bold
Évaluation :
\series default
 sur la base du prototype réalisé, une évaluation est faite.
 Le procédé étant itératif, cette évaluation servira de base à la modification
 des besoins de la première étape de l'itération suivante.
 
\end_layout

\begin_layout Standard
Afin de mener à bien ces trois phases, il est nécessaire d'établir des critères
 d'évaluation qui serviront aussi de base à l'élaboration des besoins.
 L'utilisateur application doit être pris en compte même s'il sera la cible
 du système développé par le programmeur et non directement la cible du
 notre.
 Ses besoins doivent nous permettre de mieux déterminer ce dont ont besoin
 les programmeurs pour satisfaire aux exigences des utilisateurs application.
\end_layout

\begin_layout Itemize
Pour l'utilisateur application :
\end_layout

\begin_deeper
\begin_layout Itemize
Vitesse d'apprentissage - aide nécessaire / intégrée - nombre d'erreurs
 commises lors d'un test.
\end_layout

\begin_layout Itemize
Correction des erreurs.
\end_layout

\begin_layout Itemize
Temps de réponse.
\end_layout

\begin_layout Itemize
Efficacité - navigation rapide ?
\end_layout

\end_deeper
\begin_layout Itemize
Pour le programmeur :
\end_layout

\begin_deeper
\begin_layout Itemize
Programmation intuitive.
\end_layout

\begin_layout Itemize
Bonne expressivité - ne pas avoir un code verbeux à produire (capacité d'adaptat
ion au support etc etc ?).
\end_layout

\begin_layout Itemize
Typage fort - sûreté.
\end_layout

\begin_layout Itemize
Debugging aisé - analyse de pertinence (détecter le maximum d'absurdités)
\end_layout

\begin_layout Itemize
Intégration aux IDE populaires ? Création d'un IDE ?
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Les outils :
\series default
 tout au long de ce processus de conception, des outils du génie logiciel
 vont nous aider.
\end_layout

\begin_deeper
\begin_layout Itemize
Scénarios / diagrammes de cas d'utilisation : leur utilisation, combinée
 aux critères mis en place ci-dessus, nous permettra à la fois d'établir
 les besoins et d'effectuer des tests choisis dans le cadre de l'évaluation.
 
\end_layout

\begin_layout Itemize
Diagrammes relationnels - diagrammes de classes : même si elle ne doit pas
 nous aveugler, la programmation orientée objet est adaptée au sujet.
 La réflexion à mener quant à l'organisation du système considéré se prête
 remarquablement bien à l'utilisation de ces outils.
 De plus, ils nous permettent, à un autre niveau, de nous mettre à la place
 du programmeur qui devra concevoir une interface en utilisant notre système.
\end_layout

\begin_layout Itemize
Design pattern : l'implémentation 
\begin_inset Quotes eld
\end_inset

native
\begin_inset Quotes erd
\end_inset

 de comportements génériques, typiquement pour les interactions entre l'utilisat
eur application et l'interface créée, permet à la fois de faciliter l'utilisatio
n de notre système par le programmeur mais aussi d'établir un cadre sûr
 pour les les dites interactions.
 La partie 3.1 de ce rapport est un exemple de ce principe.
\end_layout

\end_deeper
\begin_layout Subsection
Division du travail
\end_layout

\begin_layout Standard
La conception d'une interface graphique par dessus un moteur d'application
 peut se diviser en quatre parties qui devraient demeurer indépendantes
 le plus possible.
\end_layout

\begin_layout Itemize
Communication entre le moteur et l'interface :
\end_layout

\begin_deeper
\begin_layout Itemize
Affichage : ensemble des données du moteur affichées (sous diverse forme)
 par l'interface ;
\end_layout

\begin_layout Itemize
Actions : ensemble des actions de l'utilisateur modifiant l'état du moteur.
 Tout élément de l'interface permettant d'agir sur le moteur devrait être
 lié à une 
\begin_inset Quotes sld
\end_inset

Action
\begin_inset Quotes srd
\end_inset

.
 Une même Action doit pouvoir être effectuée par différents éléments d'une
 interface, et par différentes interfaces.
\end_layout

\begin_layout Standard
Cette section doit être indépendante de l'interface finale (éléments, aspect,
 etc) et de la plateforme.
\end_layout

\end_deeper
\begin_layout Itemize
Éléments de l'interface ; dépendant de la plateforme, lié à la partie précédente.
\end_layout

\begin_layout Itemize
Personnalisation des éléments : positionnement, taille, aspect...
\end_layout

\begin_deeper
\begin_layout Standard
Une telle configuration est évidemment dépendante de la partie précédente.
\end_layout

\begin_layout Standard
Certains paramètres de cette configuration doivent pouvoir être modifiés
 par l'utilisateur final.
\end_layout

\begin_layout Standard
Ces configurations doivent pouvoir être enregistrées et s'échanger facilement.
\end_layout

\end_deeper
\begin_layout Itemize
Aspect général.
\end_layout

\begin_layout Section
Analyse de l'existant
\end_layout

\begin_layout Standard
Analyse de Swing / GTK (qui ont évidement des problèmes insurmontables)
 ainsi que du couple HTML CSS et le concept intéressant de la séparation
 du style de la déclaration des objets.
\end_layout

\begin_layout Section
Outils à développer
\end_layout

\begin_layout Subsection
Actions
\end_layout

\begin_layout Standard
Une librairie graphique se doit de fournir une représentation des 
\emph on
actions
\emph default
 que l'utilisateur peut accomplir.
 Fondamentalement, il s'agit d'une fonction qui a accès au moteur de l'applicati
on, contrairement à l'interface proprement dite, mais d'autres mécanismes
 internes s'y greffent.
\end_layout

\begin_layout Standard
Ces 
\emph on
actions
\emph default
 sont indépendantes des éléments graphiques concrets qui l'implémentent,
 et donc en particulier de la plateforme sur laquelle tourne l'interface
 utilisateur.
\end_layout

\begin_layout Standard
Toute intervention de l'utilisateur final sur le système de l'application
 doit passer par une 
\emph on
action
\emph default
 telle que définie par la librairie.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Deux principes nous guident :
\end_layout

\begin_layout Itemize
La façon dont l'utilisateur accomplit cette action n'a aucune importance
 ; l'action n'a pas besoin de savoir qu'elle a été déclenchée par un bouton,
 une entrée de menu, un raccourci clavier, une commande vocale, ou même
 comme conséquence automatique d'une autre action.
\end_layout

\begin_layout Itemize
Tous les paramètres des éléments graphiques liés à une action doivent être
 
\begin_inset Quotes fld
\end_inset

transférés
\begin_inset Quotes frd
\end_inset

 à l'action si possible, tels que :
\end_layout

\begin_deeper
\begin_layout Itemize
les raccourcis claviers, noms, descriptions, textes d'aide ou icônes associés
 à une action ;
\end_layout

\begin_layout Itemize
la possibilité d'accomplir l'action (qui déterminera si le bouton ou l'entrée
 de menu sont actifs ou non, par exemple).
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
Ce mécanisme d'action fourni par la librairie graphique doit être doté d'un
 pattern 
\begin_inset Quotes fld
\end_inset

observer
\begin_inset Quotes frd
\end_inset

, permettant à d'autres éléments d'être notifié du déclenchement de l'action.
\end_layout

\begin_layout Standard
Les actions doivent pouvoir être aisément composées, afin de permettre au
 développeur de n’implémenter que les interactions minimales avec son système,
 tout en proposant à l'utilisateur final des fonctionnalités simples autant
 qu'avancés, résultant éventuellement de combinaisons complexes de ces briques
 de base.
\end_layout

\begin_layout Standard
Enfin, les actions effectuées doivent pouvoir être enregistrées, afin d'en
 conserver un historique.
 Idéalement, si chaque action dispose également d'une fonction 
\begin_inset Quotes fld
\end_inset

inverse
\begin_inset Quotes frd
\end_inset

 permettant d'annuler ses effets, la bibliothèque graphique peut fournir
 elle-même la fonctionnalité 
\begin_inset Quotes fld
\end_inset

undo / redo
\begin_inset Quotes frd
\end_inset

, aujourd'hui devenue indispensable à toute interface moderne.
\end_layout

\begin_layout Subsection
Bindings
\end_layout

\begin_layout Standard
Liaison d'une propriété d'un élément de l'interface graphique à une valeur
 du moteur de l'application : par exemple, la 
\begin_inset Quotes sld
\end_inset

clickabilité
\begin_inset Quotes srd
\end_inset

 (oui) d'un bouton à un booléen, le champs d'un label à une chaîne de caractères
, la valeur d'un curseur à une valeur du moteur logique, le contenu d'un
 panel à une image...
\end_layout

\begin_layout Standard
La liaison doit être effective dans les deux sens : le changement du champs
 du label par l'utilisateur doit modifier la valeur de la chaîne de caractère,
 tout changement tiers de la valeur doit être répercuté dans le label de
 l'interface.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Solution : la librairie fournit à l'intention du moteur de l'application
 des classes pour des types simples comprenant un pattern observer à destination
 des éléments de l'interface.
 
\end_layout

\begin_layout Subsection
Le modèle relationnel
\end_layout

\begin_layout Standard
Les différents élément d'une interface utilisateur doivent être mis en relation
 les uns avec les autres afin de former un tout cohérent.
 Le principe le plus basique, qui est celui du modèle à widget évoqué dans
 la partie 2, est de ne considérer qu'une seule relation : la relation de
 parenté entre le contenant et le contenu.
\end_layout

\begin_layout Standard
Il serait cependant intéressant de pouvoir définir plus finement les relations
 entre ces différents éléments, plus précisément, l'idée serait de ne pas
 avoir à décrire l'emplacement d'un élément par rapport à un autre, mais
 plutôt les relations entre ces éléments, un peu à la manière du couple
 HTML / CSS.
\end_layout

\begin_layout Standard
Un premier exemple de relation autre qu'une relation de parenté est la relation
 
\begin_inset Quotes fld
\end_inset

menu
\begin_inset Quotes frd
\end_inset

 qui est, à un niveau basique, présente dans Swing : pour certains éléments
 il est possible de définir un menu sans avoir à spécifier que ce dernier
 est contenu dans l'élément demandeur.
 Il y a une relation de 
\begin_inset Quotes fld
\end_inset

menu
\begin_inset Quotes frd
\end_inset

 entre ces deux éléments et non une relation directe de positionnement.
\end_layout

\begin_layout Standard
Ce modèle a pour but de permettre à l'interface produite de s'adapter à
 son environnement d'utilisation.
 De plus, une analyse statique de la cohérence d'une interface pourrait
 certainement se faire à partir d'un tel modèle (réflexion en cours).
\end_layout

\begin_layout Subsection
Langages intermédiaires
\end_layout

\begin_layout Standard
Plus approprié ici, à compléter entre autre quand l'idée d'un interpréteur
 pour le visuel de l'interface aura été tranchée.
\end_layout

\end_body
\end_document
